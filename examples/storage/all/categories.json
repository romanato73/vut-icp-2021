{
    "Experiments": [
        {
            "code": "if (A == 1) {\n  B = \"A = 1\";\n  C = true;\n} else {\n  B = \"A != 1\";\n  C = false;\n}\nY = C;",
            "inputs": [
                "int:A",
                "string:B",
                "bool:C"
            ],
            "name": "exp_2",
            "outputs": [
                "bool:Y"
            ]
        },
        {
            "code": "C = A + B;",
            "inputs": [
                "string:A",
                "string:B"
            ],
            "name": "exp_1",
            "outputs": [
                "string:C"
            ]
        }
    ],
    "Long": [
        {
            "code": "std::cout << \"Lot of inputs!\";",
            "inputs": [
                "bool:A",
                "bool:B",
                "bool:C",
                "bool:D",
                "bool:E",
                "bool:F",
                "bool:G",
                "bool:H",
                "bool:I",
                "bool:J",
                "bool:K",
                "bool:L"
            ],
            "name": "Inputs",
            "outputs": [
                "bool:X",
                "bool:Y",
                "bool:Z"
            ]
        },
        {
            "code": "std::cout << \"Lot of outputs!\";",
            "inputs": [
                "bool:_A",
                "bool:_B"
            ],
            "name": "Outputs",
            "outputs": [
                "bool:A",
                "bool:B",
                "bool:C",
                "bool:D",
                "bool:E",
                "bool:F",
                "bool:G",
                "bool:H",
                "bool:I",
                "bool:J",
                "bool:K",
                "bool:L"
            ]
        },
        {
            "code": "std::cout << \"Lot of both!\";",
            "inputs": [
                "bool:A",
                "bool:B",
                "bool:C",
                "bool:D",
                "bool:E",
                "bool:F",
                "bool:G",
                "bool:H",
                "bool:I",
                "bool:J",
                "bool:K",
                "bool:L"
            ],
            "name": "Both",
            "outputs": [
                "bool:_A",
                "bool:_B",
                "bool:_C",
                "bool:_D",
                "bool:_E",
                "bool:_F",
                "bool:_G",
                "bool:_H",
                "bool:_I",
                "bool:_J",
                "bool:_K",
                "bool:_L"
            ]
        }
    ],
    "Logical extended": [
        {
            "code": "Y = !(A & B);",
            "inputs": [
                "bool:A",
                "bool:B"
            ],
            "name": "NAND",
            "outputs": [
                "bool:Y"
            ]
        },
        {
            "code": "Y = !(A | B);",
            "inputs": [
                "bool:A",
                "bool:B"
            ],
            "name": "NOR",
            "outputs": [
                "bool:Y"
            ]
        },
        {
            "code": "Y = !(A ^ B);",
            "inputs": [
                "bool:A",
                "bool:B"
            ],
            "name": "NXOR",
            "outputs": [
                "bool:Y"
            ]
        }
    ],
    "Mathematical": [
        {
            "code": "Y = A + B;",
            "inputs": [
                "int:A",
                "int:B"
            ],
            "name": "ADD",
            "outputs": [
                "int:Y"
            ]
        },
        {
            "code": "Y = A - B;",
            "inputs": [
                "int:A",
                "int:B"
            ],
            "name": "SUB",
            "outputs": [
                "int:Y"
            ]
        },
        {
            "code": "if (B == 0) exit(-1);\nY = A / B;",
            "inputs": [
                "int:A",
                "int:B"
            ],
            "name": "DIV",
            "outputs": [
                "int:Y"
            ]
        },
        {
            "code": "Y = A * B;",
            "inputs": [
                "int:A",
                "int:B"
            ],
            "name": "MUL",
            "outputs": [
                "int:Y"
            ]
        }
    ]
}
